Direct3D 초기화 Surface(표면) 

1코드에서 표면을 이용하는데는 IDirect3DSurFace9가 이용된다. 이 인터페이스는 표면에서 직접 데이터를 읽고 쓰는 몇 가지 메서드와 함께 표면에 대한 정보를 얻는 메서드들을 제공한다.

2요소 LockRect - 이 메서드는 표면 메모리로의 포인터를 제공한다. 여기서 약간의 포인터 연산을 거치면 표면 내의 각 픽셀을 읽고 쓸 수 있게 된다.

UnlockRect - LockRect를 호출하고 포ㅛ면 메모리에 대한 작업이 끝난 뒤에는 이 메서드를 호출하여 표면의 잠금을 해제한다.

GetDesc - 표면에 대한 정보를 D3DSURFACE_DESC 구조체를 통해 얻는다.

//Direct3D - 77Page



Folder tree

Bin
실행파일 저장
maptool.exe
game.exe
data
Obj
debug 폴더
Lib
*.lib
Src
client
virtual client ( 가상 클라이언트 )
game app
server
-game server

-lobby server

-login server

tool
-map tool

-character tool


IDirect3DDevice9 

D3DPRESENT_PARAMETERS 에 따라 IDirect3DDivice9 객체를 만들어낸다.

이것은

3D그래픽을 디스플레이하는데 이용될 물리 하드웨어 장치를 나타내는 C++객체이다.

IDirect3DDevice9 인터페이스는 그래픽장치를 제어하기 위한 소프트웨어 인터페이스이다.

//3d입문 프로그래밍 - page85



Matrix로 자전 및 공전 시키기

+ Matrix44 mat1;
Matrix44 mat2; 
Matrix44 mat3; 
Matrix44 mat4;

    //초기화
mat1.SetIdentity();
mat2.SetIdentity();
mat3.SetIdentity();
mat4.SetIdentity();
mat1.SetRotationZ(_angle * 2);
//0,0을 기준으로 자전
mat2.Translate(Vector3(100, 100, 0));
    //100,100으로 이동
mat3.SetRotationZ(_count);
    //100,100으로 이동한 후 0,0을 기준으로 공전하고
mat4.Translate(Vector3(300, 300, 0));
    //위의 결과물을 전부 300,300으로 이동
RenderVertices(hdcMem, g_vertices,  mat1 * mat2 * mat3);// * mat4);


stdafx.h

미리 컴파일된 헤더파일.


#pragma once

#include "../Common/common.h"
#include "../graphic/graphic.h"
#include "../Framework/framework.h"

using namespace common;

식으로 사용될 헤더파일들을 참조시킨다.

각각의 프로젝트마다 컴파일 된 헤더파일이 존재한다. (최적화)

사용 >>

stdafx.cpp 속성에서 미리 컴파일된 헤더를 "만들기"로 바꾼다.

프로젝트에 사용된 cpp 파일에서 미리 컴파일된 헤더를 "사용"으로 바꿔야 제대로 사용 할 수 있다.